# F. front_back
# Consider dividing a string into two halves.
# If the length is even, the front and back halves are the same length.
# If the length is odd, we'll say that the extra char goes in the front half.
# e.g. 'abcde', the front half is 'abc', the back half 'de'.
# Given 2 strings, a and b, return a string of the form
#  a-front + b-front + a-back + b-back
def front_back(a, b):
    if len(a)%2==0:
        m=len(a)//2
        a_front=a[:m]
        a_back=a[m:]        
    elif len(a)%2 != 0:
        n=((len(a))-1)//2
        a_front=a[:n+1]
        a_back=a[n+1:]
    if len(b)%2==0:
        m=len(b)//2
        b_front=b[:m]
        b_back=b[m:]        
    elif len(b)%2 != 0:
        n=((len(b))-1)//2
        b_front=b[:n+1]
        b_back=b[n+1:]
    print(a_front+b_front+a_back+b_back)
        
    #half_cut(a)
    #half_cut(b)
    #print(front+front+back+back)
a='moina'
b='belan'
front_back(a, b)

#output
moibelnaan
