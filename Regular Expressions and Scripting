#from https://port.sas.ac.uk/mod/book/tool/print/index.php?id=581
#Question1#Using a text editor of your choice (see text editor lists in the 'Further resources' section), use regular expressions to perform the following tasks on the Project Gutenberg version of Defoe’s A Journal of the Plague Year:

Find all instances of the word bridge.
Solution:
def find_bridge(text): #define the function
    text=text.read() #read the text
    processed=re.compile('bridge') #specify the pattern as an object by re.compile and assign that to a variable
    print(processed.findall(text)) #print all instances of that pattern in the text
    
text=open('F:\OneDriveGSU\OneDrive - Georgia State University\Python_practice\Gutenberg.txt', 'r')
find_bridge(text)
Output:
['bridge', 'bridge', 'bridge', 'bridge']

#uestion2 from https://port.sas.ac.uk/mod/book/tool/print/index.php?id=581
#regex practice from exercise book#2#did not produce the expected output
Question: Find all instances of a London ward being mentioned
def London_ward(text1):
    text1=text1.read()
    pattern=re.compile('[a-zA-Z]+ ward ')
    print(pattern.findall(text1))

text1=open('F:\OneDriveGSU\OneDrive - Georgia State University\Python_practice\Gutenberg.txt', 'r')
London_ward(text1)  
Output:
[]
#uestion3 from https://port.sas.ac.uk/mod/book/tool/print/index.php?id=581
 #regex practice from exercise book#3 Clarkenwell Clerkenwell
 def spelling_var(text2):
     text2=text2.read()
     pattern2=re.compile('Cl[ae]rkenwell')
     print(pattern2.findall(text2))
text2=open('F:\OneDriveGSU\OneDrive - Georgia State University\Python_practice\Gutenberg.txt', 'r')
spelling_var(text2)  
#output:
['Clerkenwell', 'Clarkenwell', 'Clarkenwell', 'Clarkenwell', 'Clarkenwell', 'Clerkenwell', 'Clarkenwell', 'Clarkenwell', 'Clarkenwell', 'Clarkenwell', 'Clarkenwell', 'Clarkenwell', 'Clerkenwell']


 #regex practice from exercise book#4 from https://port.sas.ac.uk/mod/book/tool/print/index.php?id=581
# Question: Change all instances of the former spelling into the latter spelling
 def change_spell(text3):
     text3=text3.read()
     pattern3=re.sub('Clarkenwell', 'Clerkenwell', text3)
     return pattern3
text3=open('F:\OneDriveGSU\OneDrive - Georgia State University\Python_practice\Gutenberg.txt', 'r')
change_spell(text3)  
Output:
The whole text

#regex practice from exercise book#5 from https://port.sas.ac.uk/mod/book/tool/print/index.php?id=581
#question: How many paragraphs does Defoe begin with ‘I’?
def paragraph(text):
    text=text.read() #read the text
    pattern1=re.findall(r'\n\nI ', text) #find the pattern in the text and assign that to a variable
    print(pattern1) #print the variable
text=open('F:\OneDriveGSU\OneDrive - Georgia State University\Python_practice\Gutenberg.txt', 'r')
paragraph(text)

#Output: #101
#['\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', 
'\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', 
'\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', 
'\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', 
'\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', 
'\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', 
'\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', 
'\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ', '\n\nI ']

#regex practice from exercise book#6 #https://port.sas.ac.uk/mod/book/tool/print/index.php?id=581
#Question: Remove all of the paragraph break characters in the text which do not actually signify the beginning of a new paragraph (that is, which are only used to restrict line length for visual display) 
def paragraph1(text1): #this function will identify the real paragraphs with a symbol, @@@@
    text1=text1.read() #read the text
    pattern1= re.compile('\n\n\ ')  #specify the pattern object to be found     
    pattern2=re.sub(pattern1, '@@@@', text1)   #substitute the pattern with '@@@@'
    print (pattern2)
 
text1=open('F:\OneDriveGSU\OneDrive - Georgia State University\Python_practice\Gutenberg.txt', 'r')
paragraph1(text1)   

##Task: You are given a string . It consists of alphanumeric characters, spaces and symbols(+,-).
#Your task is to find all the substrings of that string that contains 2 or more vowels.

def find_substring (s):
    sub_pattern=re.compile('[aeiouAEIOU]+') #specify the pattern object with re.compile
    pattern=sub_pattern.findall(s) #find that subpattern in the string
    print(pattern)
s='123aefgour67'
find_substring (s)

#Output: 
 find_substring (s)
['ae', 'ou']

####Task You are given a string . It consists of alphanumeric characters, spaces and symbols(+,-).
#Your task is to find all the substrings of that string that contains 2 or more vowels.
#Also, these substrings must lie in between 2 consonants and should contain vowels only.
def find_substring (s):
    sub_pattern=re.compile('[^aeiouAEIOU]{2}[aeiouAEIOU]+[^aeiouAEIOU]{2}') #specify the pattern object with re.compile
    pattern=sub_pattern.findall(s) #find that subpattern in the string
    print(pattern)
s='123fgaefgdnourt67'
find_substring (s)
#output:
 find_substring (s)
['fgaefg', 'dnourt']


def remove_par(text2): #this function will replace the regular line breaks (not the paragraph breaks) with empty spaces
    text2=text2.read() #read the text
    pattern3=re.compile('\n ') #specify the pattern to be found
    pattern4=re.sub(pattern3, ' ', text2) #substitute that pattern with an empty space
    print(pattern4)

text2=open('F:\OneDriveGSU\OneDrive - Georgia State University\Python_practice\Gutenberg.txt', 'r')
remove_par(text2)    

####[from https://www.hackerrank.com/challenges/re-split/problem] 
###Task: You are given a string . It consists of alphanumeric characters, spaces and symbols(+,-).
#Your task is to find all the substrings of that string that contains 2 or more vowels.
#Also, these substrings must lie in between 2 consonants and should contain vowels only.
def find_substring (s):
    sub_pattern=re.compile('(?<=[^aeiouAEIOU]{2})[aeiouAEIOU]+(?=[^aeiouAEIOU]{2})') #specify the pattern object with re.compile.#added lookahead and lookbehind to make the function to include consonants before and after but not to include it in the output
    pattern=sub_pattern.findall(s) #find that subpattern in the string
    print(pattern)
s='123gaooefgdnoaieurt67'
find_substring (s)
#output:
find_substring (s)
['aooe', 'oaieu']

####[from https://www.hackerrank.com/challenges/re-split/problem] 
##You are given a string  consisting only of digits 0-9, commas ,, and dots .
###Your task is to complete the regex_pattern defined below, which will be used to re.split() all of the , and . symbols in .
###It’s guaranteed that every comma and every dot in  is preceeded and followed by a digit.

def split(p):
    patt=re.split('[,.]', p) #specify the pattern: split the string 'p' at [, .]
    print('\n'.join(patt)) #print every number in a new line
     
p='100,900.8900.6578,656.790.'
split(p)
##Output
10o
900
8900
6578
656
790

####[from https://www.hackerrank.com/challenges/re-split/problem] 
##Task: You are given a string m.
##Your task is to find the first occurrence of an alphanumeric character in m (read from left to right) that has consecutive repetitions.
def my_group(m): #define the function
    match=re.search(r'([a-zA-Z0-9])\1+', m) #specify the pattern to be matched in the string. re.search will search for the pattern in the whole string
    if match:
        print(match.group(1))
    else:
        print('-1')
m='..23aa8567aa4456a'
my_group(m)
##output:
a

##from https://www.hackerrank.com/challenges/re-start-re-end/problem
##Task: You are given a string S. Your task is to find the indices of the start and end of string K in S.
def find_index(k, s):
    pattern=re.compile(k)
    r=pattern.search(s)
    if not r:
        print (('-1', '-1'))
    if r:
        print((r.start(), r.end()-1))
k='cc'
s='asdgccffg'
find_index(k, s)
#output:
(4, 5)
         
